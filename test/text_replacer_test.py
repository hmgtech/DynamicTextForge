import unittest
import json
import os
import sys
from pathlib import Path

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from core import text_replacer
from utils import (
    create_text_mapping,
    load_json_file
)
from core import text_extractor

class TestTextReplacer(unittest.TestCase):
    """
    Unit tests for validating the functionality of TextReplacer class.

    This test case verifies the replacement of text in JSON data using a mapping
    generated by TextExtractor and tested against expected replaced JSON data.
    """
    
    def setUp(self):
        """
        Set up test environment by initializing TextExtractor and TextReplacer instances,
        loading test input JSON files, and creating text mapping.

        Raises:
            FileNotFoundError: If any of the test input JSON files are not found.
            json.JSONDecodeError: If any of the test input JSON files cannot be decoded.
        """
        self.extractor = text_extractor.TextExtractor()
        self.replacer = text_replacer.TextReplacer({}, {})
        
        # Define base directory
        BASE_DIR = Path(__file__).resolve().parent
        
        # Load test input files using load_json_file
        try:
            self.after_generative_ai = load_json_file(BASE_DIR / 'test_replaced_text_checkpoint.json')
            self.original_json = load_json_file(BASE_DIR / 'test_input.json')
            self.expected_replaced_json = load_json_file(BASE_DIR / 'test_replaced_text_expected.json')
        except FileNotFoundError as e:
            raise e
        except json.JSONDecodeError as e:
            raise e
        
        self.extracted_text = self.extractor.extract_text(self.original_json)

        # Create text mapping
        self.text_mapping = create_text_mapping(extracted_json=self.extracted_text, replaced_json=self.after_generative_ai)
    
    def test_extract_text(self):
        """
        Test case to verify the replace_text_in_original method of TextReplacer class.
        
        Validates that the method correctly replaces text in the original JSON data
        based on the text mapping created from TextExtractor, and matches it against
        the expected replaced JSON data.
        """
        results = self.replacer.replace_text_in_original(self.original_json, self.text_mapping)
        self.assertEqual(results, self.expected_replaced_json)

if __name__ == '__main__':
    unittest.main()
